class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        # Concept of binary search
        # if value is smaller than the middle, that means is on the LHS
        # if value is bigger, that means is on the RHS

        left, right = 0, len(nums) - 1

        # [0,1,2,3,4,5,6,7]

        # find 2

        # middle element is 0 + 7 / 2 = 3rd index -> 3 is middle element

        # since target < mid -> move right pointer to the middle one

        # now, it'll be 0 + 3/2 -> 1st index -> 1 is middle element

        # 2 is greater than middle (1), then now, shift left pointer to middle

        # now, it'll be (1 + 3) / 2 -> 2nd index -> 2 is middle element



        # cannot be <= because when they are equal, means element is found
        # at that point, exit the loop
        while left <= right:
            mid = (left + right) / 2

            if target < nums[mid]:
                # shift the right pointer to the middle + 1
                # cause if you shift it to mid, then it doesn't make sense
                # because you already concluded that the mid is bigger than target
                right = mid - 1
            elif target > nums[mid]:
                # shift the left pointer to the middle + 1
                # cause if you shift it to mid, then it doesn't make sense
                # because you already concluded that the mid is smaller than target
                left = mid + 1
            else:
                return mid
        
        return -1
